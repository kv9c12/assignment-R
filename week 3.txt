
Search or jump to…

Pull requests
Issues
Marketplace
Explore
 @thenewpop Sign out
0
0 0 RohitSheemar/r-program
 Code  Issues 0  Pull requests 0  Projects 1  Wiki  Insights
r-program/r prog
4907e2f  12 hours ago
@RohitSheemar RohitSheemar r prog
     
99 lines (94 sloc)  4.25 KB
#cachematrix.R ---> by Rohit 	## Put comments here that give an overall description of what your
## functions do
 ## Write a short comment describing this function
 ##This function Function makeCacheMatrix gets a matrix as an input, set the value of the matrix,	
#get the value of the matrix, set the inverse Matrix and get the inverse Matrix. The matrix object	
#can cache its own object. 	
 #<<- operator is used to assign a value to an object in an environment that is different 	
#from the current environment 	
 #take the matrix as an input	
makeCacheMatrix <- function(x = matrix()) {	makeCacheMatrix <- function(x = matrix()) {
  invMatrix <- NULL	
  	
#set the value of the Matrix	
  setMatrix <- function(y) {	
    x <<- y	
    invMatrix <<- NULL	
  }	
  	
  getMatrix <- function() x                              #get the value of the Matrix	
  setInverse <- function(inverse) invMatrix <<- inverse  #set the value of the invertible matrix	
  getInverse <- function() invMatrix                     #get the value of the invertible matrix	
  list(setMatrix = setMatrix, getMatrix = getMatrix,	
       setInverse = setInverse, getInverse = getInverse)	
 }	}
 ## The function cacheSolve takes the output of the previous matrix makeCacheMatrix(matrix) as an 	## Write a short comment describing this function
# input and checks inverse matrix from makeCacheMatrix(matrix) has any value in it or not.	
# In case inverse matrix from makeCacheMatrix((matrix) is empty, it gets the original matrix data from 	
# and set the invertible  matrix by using the solve function.	
# In case inverse matrix from makeCacheMatrix((matrix) has some value in it (always works	
#after running the code 1st time), it returns a message  "Getting Cached Invertible Matrix" 	
#and the cached object	
  	
 cacheSolve <- function(x, ...) {	cacheSolve <- function(x, ...) {
  	        ## Return a matrix that is the inverse of 'x'
#get the value of the invertible matrix from the makeCacheMatrix function	
          invMatrix <- x$getInverse()	
        if(!is.null(invMatrix)) {                       #if inverse matrix is not NULL	
          message("Getting Cached Invertible Matrix")   #Type message: Getting Cached Invertible Matrix 	
          return(invMatrix)                             #return the invertible matrix	
        }	
          	
#if value of the invertible matrix is NULL then  	
        MatrixData <- x$getMatrix()                     #get the original Matrix Data 	
        invMatrix <- solve(MatrixData, ...)             #use solve function to inverse the matrix	
        x$setInverse(invMatrix)                         #set the invertible matrix 	
        return(invMatrix)                               #return the invertible matrix	
}	}
 #########Testing##########	
 ####Test 1 [2*2 Matrix] #####	
TestMatrix <- matrix(1:4,2,2)	
TestMatrix	
 CacheMatrix <- makeCacheMatrix(TestMatrix)	
CacheMatrix$getMatrix()	
CacheMatrix$getInverse()	
 cacheSolve(CacheMatrix)	
cacheSolve(CacheMatrix)	
 ####Test 2 [2*2 Matrix] #####	
TestMatrix <- matrix(c(1,5,8,2),2,2)	
TestMatrix	
 CacheMatrix <- makeCacheMatrix(TestMatrix)	
CacheMatrix$getMatrix()	
CacheMatrix$getInverse()	
 cacheSolve(CacheMatrix)	
cacheSolve(CacheMatrix)	
 ####Test 3 [3*3 Matrix] --> singulat Matrix #####	
#matrix(1:9,3,3) is not possible (singule matrix) because it is giving det(A)  = 0	
#matrix = 1/det(A)[3,-6,3,-6,12,-6,3,-6,3] |det(A) = 1/(1*3 +4* (-6) + 7 *3) = 1/0	
TestMatrix <- matrix(1:9,3,3)	
TestMatrix	
 CacheMatrix <- makeCacheMatrix(TestMatrix)	
CacheMatrix$getMatrix()	
CacheMatrix$getInverse()	
 cacheSolve(CacheMatrix)	
cacheSolve(CacheMatrix)	
 ####Test 4 [3*3 Matrix]#####	
TestMatrix <- matrix(1:8,3,3)	
TestMatrix	
 CacheMatrix <- makeCacheMatrix(TestMatrix)	
CacheMatrix$getMatrix()	
CacheMatrix$getInverse()	
 cacheSolve(CacheMatrix)	
cacheSolve(CacheMatrix)	
 ####Test 5 [4*4 Matrix]#####	
TestMatrix <- matrix(c(2,3,5,1,3,7,4,5,6,8,0,0,4,5,6,0),4,4)	
TestMatrix	
 CacheMatrix <- makeCacheMatrix(TestMatrix)	
CacheMatrix$getMatrix()	
CacheMatrix$getInverse()	
 cacheSolve(CacheMatrix)	
cacheSolve(CacheMatrix)	
 ####Test 6 [4*4 Matrix]  --> singular Matrix #####	
TestMatrix <- matrix(5:21,4,4)	
TestMatrix	
 CacheMatrix <- makeCacheMatrix(TestMatrix)	
CacheMatrix$getMatrix()	
CacheMatrix$getInverse()	
 cacheSolve(CacheMatrix)	
cacheSolve(CacheMatrix)	
© 2018 GitHub, Inc.
Terms
Privacy
Security
Status
Help
Contact GitHub
API
Training
Shop
Blog
About
Press h to open a hovercard with more details.